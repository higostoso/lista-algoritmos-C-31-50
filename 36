#include <stdio.h>
#include <stdlib.h>

#define MAX 100

typedef struct {
    int top;
    int array[MAX];
} Stack;

void initStack(Stack *s) {
    s->top = -1;
}

int isEmpty(Stack *s) {
    return s->top == -1;
}

int isFull(Stack *s) {
    return s->top == MAX - 1;
}

void push(Stack *s, int value) {
    if (isFull(s)) {
        printf("Pilha cheia! Não é possível empurrar o valor %d\n", value);
        return;
    }
    s->array[++(s->top)] = value;
    printf("Empurrou %d para a pilha\n", value);
}

int pop(Stack *s) {
    if (isEmpty(s)) {
        printf("Pilha vazia! Não é possível remover um valor\n");
        return -1;
    }
    return s->array[(s->top)--];
}

int peek(Stack *s) {
    if (isEmpty(s)) {
        printf("Pilha vazia! Não há valor no topo\n");
        return -1;
    }
    return s->array[s->top];
}

void printStack(Stack *s) {
    if (isEmpty(s)) {
        printf("Pilha vazia!\n");
        return;
    }
    printf("Elementos na pilha: ");
    for (int i = 0; i <= s->top; i++) {
        printf("%d ", s->array[i]);
    }
    printf("\n");
}

int main() {
    Stack s;
    initStack(&s);

    push(&s, 10);
    push(&s, 20);
    push(&s, 30);

    printStack(&s);

    printf("Topo da pilha: %d\n", peek(&s));

    printf("Removido da pilha: %d\n", pop(&s));
    printf("Removido da pilha: %d\n", pop(&s));

    printStack(&s);

    return 0;
}
